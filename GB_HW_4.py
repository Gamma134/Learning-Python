# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.


def sal():
    from sys import argv
    script_name, wh, eph, bonus = argv
    earn = float(wh) * float(eph) + float(bonus)
    print(f"Имя Скрипта {script_name}")
    print(f"Вы работали: {wh} часов")
    print(f"Ваша ставка: ${eph} в час")
    print(f"Бонус: ${bonus}")
    print(f"В сумме ваша зарплата: ${earn:.2f}")


sal()

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

my_list = [int(i) for i in input("Введите числа через запятую: ").split(",")]
n_list = []
for i in range(1, len(my_list)):
    if my_list[i] > my_list[i - 1]:
        n_list.append(my_list[i])
print(n_list)

# 3.Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

my_list = [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]
print(my_list)

# 4. Представлен список чисел.
# Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

org_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
my_list = [i for i in org_list if org_list.count(i) < 2]
print(my_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce


def my_func(p_i, i):
    return p_i * i


my_list = [i for i in range(100, 1001) if i % 2 == 0]

print(reduce(my_func, my_list))

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.

# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

from itertools import count, cycle


# a.

def my_func(start, end):
    for i in count(int(start)):
        if i > end:
            break
        else:
            print(i)


my_func(3, 10)

# b.
from itertools import cycle

my_list = [True, 'ABC', 123, None]
new_list = []


def my_func_b():
    for i in cycle(my_list):
        new_list.append(i)
        if new_list.count(i) > 1:
            break
        else:
            print(i)


my_func_b()

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове
# функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и
# до n!. Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4
# = 24.

from itertools import count
from math import factorial

n = int(input("When to finish factorial?: "))


def fact():
    for i in count(1):
        yield factorial(i)


x = 0
for i in fact():
    if x < n:
        print(i)
        x += 1
    else:
        break

fact()
